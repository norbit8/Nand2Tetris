// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int freeList;
    static Array heap;
    static Array ram;

    /** Initializes the class. */
    function void init() {
        let freeList = 2048; // heap base
        let heap = 2048;
        let heap[0] = 0; // freeList.next
        let heap[1] = 14335; // freeList.size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address]; 
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block; // reference to the base address of the allocate block
        var int addr; // the begining of the segment.
        let addr = 2;
        // first-fit greedy-algorithm
        while (~(heap[addr - 2] = 0)) {
            if (~(heap[addr - 1] < (size + 2))) {
                let block = heap + addr + heap[addr - 1] - size;
                do Memory.poke(block, -31416); // 'next' block
                do Memory.poke(block + 1, size); // size of the block
                let heap[addr - 1] = heap[addr - 1] - size - 2; // removing the size that I allocated
                return block;
            }
            else {
                let addr = heap[addr - 2] - heap;
            }
        }

        if (~(heap[addr - 1] < (size + 2))) {
            let block = heap + addr + heap[addr - 1] - size;
            do Memory.poke(block, -31416); // 'next' block;
            do Memory.poke(block + 1, size); // size of the block
            let heap[addr - 1] = heap[addr - 1] - size - 2;
            return block;
            }
        else {
            // cannot allocate memory, drop an error:
            return null;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int addr;
        let addr = 2;
        while (~(heap[addr - 2] = 0)) {
            let addr = heap[addr - 2] - heap;
        }
        let heap[addr - 2] = o; // chaining the object to the end of the LinkedList
        let o[0] = 0; // changing the objects header (next) to 0 <=> null pointer... end of the list... 
        return;
    }    
}
