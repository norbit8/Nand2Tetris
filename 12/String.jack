// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    static int maxlen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str = Array.new(1);
            let length = 0;
            let maxlen = maxLength;
            return this;
        }
        else {
            let str = Array.new(maxLength);
            let length = 0;
            let maxlen = maxLength;
            return this;
        }
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < maxlen) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length -1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, d;
        var int index;
        var boolean minus;
        let index = 0;
        let val = 0;
        let minus = false;
        while ( index < length ) { 
            if (charAt(index) = 45) {
                let minus = true;
                let index = index + 1;
            }
            else {
                let d = charAt(index);
                let val = (val * 10) + d - 48;
                let index = index + 1;
            }
        }
        if (minus) {
            return -val;
        }
        else{
            return val;
        }
    }

    /**Recursion helper function for setInt(int val)*/
	method void helper(int val) {
		var int lastDigit;
		if(val < 0) {
			do appendChar(45); // append "-"
			let val = Math.abs(val);
		}
	    let lastDigit = val - ((val / 10) * 10);
        if (val < 10) {
            do appendChar(lastDigit + 48);
        }
        else {
            do helper(val / 10);
            do appendChar(lastDigit + 48);
        }
		return;
	}
	
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var boolean edge;
		let edge = false;
		let length = 0;
		if (val = ~(32767)) {
			let val = -3276;
			let edge = true;
		}
		do helper(val);
		if (edge) {
			do appendChar(56);
		}
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        var char c;
        let c = 128;
        return c;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        var char c;
        let c = 129;
        return c;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        var char c;
        let c = 34;
        return c;
    }
}
