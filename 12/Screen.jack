// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean black;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let black = true;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = ~32767;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int addrCounter;
		let addrCounter = 0;
		//go over all addresses in the screen
		while(~(addrCounter > 8192)) {
			do Memory.poke(16384 + addrCounter, 0);
			let addrCounter = addrCounter + 1;
		}
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let black = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var int mask;
        let address = ((32 * y) + (x / 16));
        let value = Memory.peek(16384 + address);
        let mask = twoToThe[x & 15];
        if (black) {
            let value = value | mask;
        }
        else {
            let value = (value & ~mask);
        }
        do Memory.poke(16384 + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int startingY, startingX, endingY, endingX;
        var int a, b;
        var int dx, dy;
        var int diff;
		var int startAddress;
		var int endAddress;
        let startingX = Math.min(x1, x2);
        let endingX = Math.max(x1, x2);
        let startingY = Math.min(y1, y2);
        let endingY = Math.max(y1, y2);
        if (y1 = y2) {
            // draw horizontal line ~SPECIAL~
            while (~(startingX > endingX)) {
                do Screen.drawPixel(startingX, y1);
                let startingX = startingX + 1;
            }    
        }
        if (x1 = x2) {
            // draw vertical line ~SPECIAL~
			let startAddress = 16384 + ((32 * startingY) + (x1 / 16));
			let endAddress = 16384 + ((32 * endingY) + (x1 / 16));
            while (~(startAddress > endAddress)) {				
                do Memory.poke(startAddress, twoToThe[x1 & 15]);
                let startAddress = startAddress + 32;
            }
        }

        let startingX = Math.min(x1, x2);
        let endingX = Math.max(x1, x2);
        let startingY = Math.min(y1, y2);
        let endingY = Math.max(y1, y2);
        if ( ((x1 < x2) & (y1 < y2)) | ((x1 > x2) & (y1 > y2)) ) {
            let dx = Math.abs(x2 - x1);
            let dy = Math.abs(y2 - y1);
            let diff = 0;
            let a = 0;
            let b = 0;
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(startingX + a, startingY + b);
                // decide if to go right, or up;
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        else {
            let dx = -Math.abs(x2 - x1);
            let dy = Math.abs(y2 - y1);
            let diff = 0;
            let a = 0;
            let b = 0;
            while (~(a < dx) & ~(b > dy)) {
                do Screen.drawPixel(endingX + a, startingY + b);
                // decide if to go right, or up;
                if (diff > 0) {
                    let a = a - 1;
                    let diff = diff - dy;
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r){
       var int dy;
       var int squaredRadius;
       if (r > 181) {
           let r = 181;
       }
       let dy = -r;
       let squaredRadius = r * r;
       while (~(dy > r)) {
           do Screen.drawLine(x - Math.sqrt(squaredRadius - (dy*dy)), y + dy, x + Math.sqrt(squaredRadius - (dy*dy)), y + dy);
           let dy = dy + 1;
       }
       return;
    }
}
