class Rock {
	field int loc_x, loc_y;
	field bool wasImpact;
	field int location;

	constructor Rock new(int aLocation) {
		let loc_x = Utils.mod(16 * aLocation, 512);
		let loc_y = aLocation / 32;
        	let location = aLocation;
		let wasImpact = false;
		do draw();
		return this;
	}

	method void draw() {
		var int memAddress;
		let memAddress = 16384 + location;
		do Memory.poke(memAddress + 0, -1);
		do Memory.poke(memAddress + 32, -1);
		do Memory.poke(memAddress + 64, -1025);
		do Memory.poke(memAddress + 96, -4065);
		do Memory.poke(memAddress + 128, -7137);
		do Memory.poke(memAddress + 160, -8113);
		do Memory.poke(memAddress + 192, -16369);
		do Memory.poke(memAddress + 224, -14201);
		do Memory.poke(memAddress + 256, -32749);
		do Memory.poke(memAddress + 288, -32765);
		do Memory.poke(memAddress + 320, -32765);
		do Memory.poke(memAddress + 352, -14057);
		do Memory.poke(memAddress + 384, -8177);
		do Memory.poke(memAddress + 416, -4001);
		do Memory.poke(memAddress + 448, -449);
		do Memory.poke(memAddress + 480, -1);
		return;
	}
	
	method int getLocX() {
		return loc_x;
	}

	method int getLocY() {
		return loc_y;
	}

	method bool collided() {
		return wasImpact;
	}

	method void setCollide(bool new_state) {
		let wasImpact = new_state;
		return;
	}

	method void setLoc(int new_x, int new_y) {
		let loc_x = new_x;
		let loc_y = new_y;
		return;	
	}
	method void erase() {
		do Screen.setColor(true);
        	do Screen.drawRectangle(loc_x, loc_y, loc_x + 15, loc_y + 15);
        	return;
	}

    	method void dispose() {
         	do Memory.deAlloc(this);
  	      return;   
    	}
} // Rock Class
