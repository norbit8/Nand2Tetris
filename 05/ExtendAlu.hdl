/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
	 ShiftLeft (in=x, out=ShiftLeftx);
	 ShiftLeft (in=y, out=ShiftLefty);
	 ShiftRight (in=x, out=ShiftRightx);
	 ShiftRight (in=y, out=ShiftRighty);
	 Mux4Way16 (a=ShiftRighty, b=ShiftRightx, c=ShiftLefty, d=ShiftLeftx, sel=instruction[4..5], out=shift); // Determines which Shift should we perform
	 Mul (a=x, b=y, out=xMuly);
	 ALU (x=x, y=y, zx= instruction[5], nx= instruction[4], zy= instruction[3], ny= instruction[2], f= instruction[1], no= instruction[0], out=regALU, zr=regzr, ng=regng);
	 Mux4Way16 (a=xMuly, b=shift, c=xMuly, d=regALU, sel=instruction[7..8], out=out, out[15]=ng, out[0..7]=half1, out[8..15]=half2); // Chooses between Shift, Mul or regular ALU operation 
	 Or8Way (in=half1, out=zr1);
	 Or8Way (in=half2, out=zr2);
	 Or (a=zr1, b=zr2, out=Notzr);
	 Not (in=Notzr, out=zr);
}
